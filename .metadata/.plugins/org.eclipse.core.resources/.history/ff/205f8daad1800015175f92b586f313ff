__author__ = 'ChrisPOConnell'
'''
Assignment 4
from test.test_importlib.import_.test_packages import ParentModuleTests
from test.test_importlib.import_.test_packages import ParentModuleTests
gui.py
'''

from tkinter import *

# Feature 21.1 Assignment 4
class GuiMainMenu(Frame):
    def __init__(self,Parent):
        Frame.__init__(self,Parent)
        self.parent = Parent
        self.GuiInit()
    
    def GuiInit(self):
        # Adds title to top of window.
        self.parent.title("Catalog Staging Program")
       
        # Creates main menu bar object.
        menu_bar=Menu(self.parent)
        
        # Creates submenus
        file_options = Menu(self.parent)
        help_options = Menu(self.parent)
        
        # Adds menu_bar to parent object.  
        self.parent.config(menu=menu_bar)
        
        '''
        Functions used in the buttons are created in this section!
        '''
        def display_help_readme():
            master=Tk()
            fileR = open('README.txt')
            readmefile = fileR.read()
            help_readme = Message(master, text = readmefile)
            help_readme.pack()
        
        # Feature 21.2 Assignment 4 
        def display_help_about():
            master = Tk()
            help_about = Label(master, text = "Help -> About:  Catalog Staging Program - Assignment 4")
            help_about.pack()        
            
        def onExit(): self.quit()
        
        def display_file_entry():
            master = Tk()
            e = Entry(master)
            e.pack()
                        
            e.focus_set()
            
            def callback():
                print(e.get())
   
            b = Button(master,text = "OK", width = 10, command = callback)
            b.pack()
            
            test = e.get()
            mainloop()
            
        def makeentry(parent, caption, width=None, **options):
            Label(parent, text=caption).pack(side=LEFT)
            entry = Entry(parent, **options)
            if width:
                entry.config(width=width)
                entry.pack(side=LEFT)
                return entry

            user = makeentry(parent, "User name:", 10)
            password = makeentry(parent, "Password:", 10, show="*")
            content = StringVar()
            entry = Entry(parent, text=caption, textvariable=content)
            text = content.get()
            content.set(text)

            
        # Populate menu_bar with submenus.
        menu_bar.add_cascade(label="File",menu=file_options)
        menu_bar.add_cascade(label="Help",menu=help_options)
        
        # Create onExit function and add to File menu
        file_options.add_command(label = "Your name", command = display_file_entry)
        #file_options.add_command(label = "Make entry", command = )
        file_options.add_command(label = "Exit",command = onExit)
        
        # Populates Help -> About
        help_options.add_command(label = "README",command=display_help_readme)
        help_options.add_command(label = "About", command = display_help_about)

def main_function():
    root = Tk()
    root.geometry("450x250+600+400")  # sets size for window + positions it on screen
    # width, height of window, x screen coordinate, y coordinate
    app = GuiMainMenu(root)
    root.mainloop()



if __name__ == '__main__':
    # http://stackoverflow.com/questions/419163/what-does-if-name-main-do
    main_function()